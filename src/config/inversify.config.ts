import {Container} from "inversify";
import {DatabaseConnection} from "../database";
import {Logger} from "./logger.config";
import {IUserRepository} from "../repositories/auth/user.repository";
import {UserPrismaRepository} from "../repositories/auth/user.prisma.repository";
import {AccessTokenStrategy} from "../middelware/strategy/access-token.strategy";
import {AuthService} from "../services/auth.service";
import {IRefreshTokenRepository} from "../repositories/auth/refresh-token.repository";
import {RefreshTokenPrismaRepository} from "../repositories/auth/refresh-token.prisma.repository";
import {InstructorService} from "../services/instructor.service";
import {IInstructorRepository} from "../repositories/instructor/instructor.repository";
import {InstructorPrismaRepository} from "../repositories/instructor/instructor.prisma.repository";
import {StudentService} from "../services/student.service";
import {StudentPrismaRepository} from "../repositories/student/student.prisma.repository";
import {IStudentRepository} from "../repositories/student/student.repository";
import {SessionService} from "../services/session.service";
import {SessionPrismaRepository} from "../repositories/session/session.prisma.repository";
import {ISessionRepository} from "../repositories/session/session.repository";

export const container = new Container();
container.bind(Logger).toSelf();
container.bind(DatabaseConnection).toSelf();
container.bind(AccessTokenStrategy).toSelf();
container.bind(IUserRepository).to(UserPrismaRepository);
container.bind(IInstructorRepository).to(InstructorPrismaRepository);
container.bind(IRefreshTokenRepository).to(RefreshTokenPrismaRepository);
container.bind(IStudentRepository).to(StudentPrismaRepository);
container.bind(ISessionRepository).to(SessionPrismaRepository);
container.bind(AuthService).toSelf();
container.bind(InstructorService).toSelf();
container.bind(StudentService).toSelf();
container.bind(SessionService).toSelf();